

DEVNOTES

-----------

try this simple cors api using micros
https://itnext.io/rebel-with-a-cors-1ea5d723d52c

-----------

Learn Graph Thoery - important for analytics -- neo4j
https://mrpandey.github.io/d3graphTheory/index.html

https://github.com/mrpandey/d3graphTheory

----------

check this out -- maybe run it with testlab/spatial

reports on framerates
https://github.com/mobz/lag-radar

--------

mark text -- for maintaining all of our website md pages
https://marktext.github.io/website/

----

API Management - watch this

https://a16z.com/2018/03/09/api-world-summit/

----

explore this -- can we connect bots to it for analytics?
https://medium.com/ibm-watson-data-lab/notebooks-for-spreadsheet-users-6481c79ad980

------

package amnager and content delivery
https://unpkg.com/#/

----

live preview of react components
http://bluekit.blueberry.io/

-------------

testing - explore

https://github.com/airbnb/enzyme
https://facebook.github.io/jest/
--------

CI with TRavis and NPM
https://medium.com/@tomastrajan/how-to-speed-up-continuous-integration-build-with-new-npm-ci-and-package-lock-json-7647f91751a


----

test tool 
benchmark tests of function
https://wedgetail.js.org/index.html



-----------

payment widget -- plasso  -- create a subscription service
https://plasso.com/


--------------



IDEA - microservice can redirect to a new state -- for skipping around states based on conditional answers in response to prior questions -- flow control on logic

----------

IDEA - in texting among members -- can use a handle and direct private messages?

----------

need to commercially harden platform for microservice errors
Like a call to openwhisk can yield an error object of ECONNREFUSED

ie
{Error: .....,
 code: 'ECONNREFUSED,
 errno: 'ECONNREFUSED,
 ...}

issue a platform message -- maybe an agent doing error processing ....like 'something went wrong outside of my control ...please try again'

---

npm human-time
https://www.npmjs.com/package/human-time

---------
MARKET PLACE - Feb 27
discussion with Juan - 
> should we save github items into mongodb? Save on rate limit?
> but marketplace needs to mirror github? How would we keep these items synched
> github offers webhooks -- you can listen for issue changes?


also discussed the use of the blockchain to record approved agreement on price, due date, assignment etc --- 
--------

process for multichannel 
1. note that message object updated for chaoticsource (web, sms, fb, tw, telegram etc)
2. all this means is all channels rationalized to sms data format (uniform communications?)
3 in sms route -- switch case based on req.body.chaoticsource

-------

full authentication service
https://github.com/clevertech/authentication-service

https://pnp-authentication-service.herokuapp.com/

--------

stateless login in with oauth microservice
https://github.com/lipp/login-with

https://login-with.com/

--------

pattern for plugins 

https://github.com/askmike/gekko/blob/develop/plugins.js

and a nice piece of coding -- see getMinTradeSize function and use on line 124
https://github.com/askmike/gekko/blob/develop/util/genMarketFiles/update-kraken.js

-----

micromatch function -- powerful -- maybe as a way for identify skill sources?

https://www.npmjs.com/package/micromatch

------

think through the stategy and design of the skills object -- droidhq has a nice outline of its uniform communications object -- explicit number of object types it can process -- and lays out each one in a framework -- same with skills -- different skill types -- more coming in the future (speak, see, sense  ... the types i am outlining are more transactional ...)

https://developers.broid.ai/activitystreams/base/

i am thkining about a skill and the skillsource ,,, where do i got for it .... not sure this is right

------

microlink --  convert links into cards
https://docs.microlink.io/sdk/getting-started/react/


-----

-- look at blackchain processes -- can i build a 'proof technology' -- easy to leverage via messaging   - mediator pattern for agreeing to certify a position, deliverable, proposal, 

https://credentials.mit.edu/
http://www.blockcerts.org/about.html

---------

definitely integrate 
https://calendly.com/

---------

explore - moving an async function into its own thread?

https://github.com/developit/greenlet

----------

THIS
https://ipdata.co/

----------

some tips on use of mocha for testing and nodejs promisfy to async readfile.js

https://start.jcolemorrison.com/5-tips-and-thoughts-on-async-await-functions/amp/

---------

async await model
const main = async (paramsA, paramsB, paramsC) => {  
  const resA = await funcA(paramsA)
  const resB = await funcB(paramsB)
  const resC = await funcC(paramsC)

  return { resA, resB, resC }
}

// ... all we need is this `.catch` to handle all of them.
main()  
  .then(d => { // do things with the result })
  .catch(e => { // handle that error! })

---------
If you do need to uniquely handle an error and don't want to use try/catch you can also do this

const main = async (paramsA, paramsB, paramsC) => {  
  const resA = await funcA(paramsA)
  const resB = await funcB(paramsB).catch(e => { // things unique to this error })
  const resC = await funcC(paramsC)

  return { resA, resB, resC }
}

// ... all we need is this `.catch` to handle all of them.
main()  
  .then(d => { // do things with the result })
  .catch(e => { // handle all other errors!! })


-----------

publish a csv to sqllite
https://github.com/simonw/datasette

-----------
adding charts and d3 graphics?

https://github.com/PMSI-AlignAlytics/dimple
https://github.com/FormidableLabs/victory

-------------

skill library has 3 sources, users, system and cloud (http)

some of the skills to explore include
- blindcopytext
- blindemail
- blockchain post
- hail a ride
- many others

the point is if the user is part of private membership network -- then can continue to process knowing that we have payment and other PI data on hand

also in workflow ---
-- restart
-- switch agent

need to use system object for interagent comunication and skill status

-- for restart - could reset machine name and state -- and go ....

-------------


control structure on top of async await

var Boo;
 var Foo = await getBar(i)
 while(Foo) {
    Boo = await getBar3(i)
    if (Boo) {
      // something
    }
    Foo = await getBar(i)
    i++
  }
-------------
process array in squence

To wait the result we should return back to old-school “for loop”, but this time we can use modern version with for..of construction (thanks to Iteration Protocol) for better readability:

async function processArray(array) {
 for (cont item of array){
	await delaylog(item)
}
console.log('done')
}

// 1, 2, 3,  done

-----




------------

asyn await -- retry pattern

function wait (timeout) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve()
    }, timeout)
  })
}

async function requestWithRetry (url) {
  const MAX_RETRIES = 10
  for (let i = 0; i <= MAX_RETRIES; i++) {
    try {
      return await request(url)
    } catch (err) {
      const timeout = Math.pow(2, i)
      console.log('Waiting', timeout, 'ms')
      await wait(timeout)
      console.log('Retrying', err.message, i)
    }
  }
}



------------
error architecture -- including setting system object to error -- and processing notifications to platform owners and managed hosting team via text or email


---------------
testing architecture -- a travis process


---------------

twitter bot - 17 lines of code
https://dev.to/omarhashimoto/how-to-build-a-simple-twitter-bot-in-17-lines-ofcode-2aan
-----------

publish and subscribe
> redis pubsub -- which i have demonstrated already -- with dbstore and chaoticdash?
> postal
https://www.npmjs.com/package/postal
>pubsub
https://www.npmjs.com/package/pubsub-js

------------
state machines
https://www.npmjs.com/package/javascript-state-machine
https://www.npmjs.com/package/machina
https://www.npmjs.com/package/stately.js

---------------

REFACTORING APP WORKFLOW
use bankbot as a pattern

https://github.com/numical/bankbot/tree/master/lib/chatbot

--------------

great post on client-side vs server-side rendering and the challenges
this is what keeps me from accessing chat widget via a text message

https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writting-manually

-----------------

svg icon set from github 
https://github.com/leungwensen/svg-icon

-----------------

use case explorations
> FAQ,
> subscriptions
> registry
> membership
> content delivery
> make web accessable and consumable
> specialized chat widgets that are accessed via text from web site?


-------------------

requirement for pagination - reading 20 docs at a time from mongodb that has large volumes of data  .. see
https://www.npmjs.com/package/mongoose-paginate

https://www.npmjs.com/package/react-paginate


-----------------

1. need multistep interaction -- chain dialogue (see Research notes

see multitest.js app -- where this capability is being prototyped

--------------------

2. Need volume testing

3. Need to handle dialogue on any prayer requests or questions/help for pastors?

------------------

4. DONE - mongoserver -include email alert from chaoticbots -- on error send a notification

--------------

5 bulk notifications via twilio - boardcasts

https://www.twilio.com/blog/2017/12/send-bulk-sms-twilio-node-js.html

----------------------

6 complex multistep interactions -- handle dialogue chaining

https://github.com/brianbrunner/yowl-dialog-manager

https://www.npmjs.com/package/yowl

------------------------

7 - see research papers at articles/1801 - on complex dialogue bots and available corpus

stanford paper lays out definition of various agents - frame-based, chat, dialogue agent

dialogue volleys

8 using finiste state machines -- like alexis - to manage complex chaining
https://medium.com/ai2-blog/alexafsm-a-finite-state-machine-python-library-for-building-complex-alexa-skills-61c3af5a299d

9 http://superscriptjs.com/  dialogue system

https://github.com/superscriptjs/superscript

10 Branching dialogue json example --
https://github.com/chinedufn/branching-dialogue

11 dialogue dataset - multi-turn 
https://github.com/hongweizeng/Dialogue-Corpus

12 microsoft maluuba frames - essentially a set of dialogues that can support decision making in complex settings

mostly directed towards general intelligence (agi)

http://datasets.maluuba.com/Frames
http://datasets.maluuba.com/NewsQA
Most dialogue systems implement goal-oriented conversations as a sequential, slot-filling process. Each dialogue state is either augmented with new information (left) or overwritten (right).

13 dialogue generator - written to generate a dialogue file for watson
https://github.com/diegoajv/DialogGenerator

14 corpus -- large data sets useful for building frame-based bots
https://github.com/dariusk/corpora/tree/master/data






Solving frame tracking would enable dialogue systems to memorize all the information provided by the user and allow comparisons between items.
