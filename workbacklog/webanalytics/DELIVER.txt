
DISCUSSION WITH JUSTIN ADAMS ON MAY 8

FRAMEWORK NAVIGATION

This is all about views and data. The controller component is integrated with the views because of the power of reactjs components -- combining html and js

So given that, each 'micro app' is instantiated through the views tree structure

1. create a folder under views

2. create a package.json to identify the entry point for an app within the micro project

3. compose and test the project

---------------------

The microapp is integrated into the dashboard by

1. updating src/components/sidebar _nav.js with the route. Note this file is an object which permits dynamic configuration of the sidebar menu options, sub options, icons, titles and url path that is triggered

2. updating containers/full/full.js -- Note that this is the reactjs paths within route. The path (as specified in sidebar) is activated, triggering the associated component. The component is imported from the folder of the micro app

--------------------------

3,. highly discplined in all naming conventions -- files.js match exports match imports match labels

includes naming and passing parms function to function
--

4. must include error handling

--------

5 must be highly discplined in project structure and use of folders -- note in member project how apps isolated to same folders which have integrated functions
-------

6. Note the relationships between 
-src/route.js, 
-src/components/Breadcrumb and 
-src/containers/Full -- 

Breadcrumbs is a strapreact component that displays a 'trail' on the webpage of menu items visited

----------------

7 workflow -- integrating a new component

-
8. auth0 is the JWT base security framework -- 
----------------

9. a rigid datamodel will help in refactoring cycle time for clients in the future -- but the overall package may too complex for Strategic Machines to use for client delivery

---------------

10 tracing a transaction through webanalytics

> note there are 2 servers (dev server for client and the server for backend)
> the client begins at 
> src/index.js and
> imports the routing from src/authRoutes
> routing is 'governed' by the code found in src/Auth/Auth.js. Note this is a constructor is imported by authRoutes (client side auth0)

> In authRoutes -- triggers src/containers/Full when authorized 

note -- components for Guest and Admin are not in the project -- just presented as examples of alternative routes that could be deployed

> Client to Server api example

In src/container/Full, note that auth is passed as a prop in line 67 to <Header />

In src/containers/Full -- option to select the components Contacts

in src/views/Members/Contacts -- the code for this 'micro app' is found

in Contacts.js you will note that an api is imported on Line 11 from src/utils

in utils/API.js is the code for http transactions with the backend server for Contacts.js

NOTE - this API has not been coded to send a jwt -- it sends a 'mock token' generated by random. 

in server/index.js (backend) -- you'll see the path /contacts. The code for the 'mock auth test' has been commented out in Lines 77 - 91

Test routines beginning on Line 116 in server/index.js have been included for testing route authorization -- but never incorporated into the front end design

--------------------

SPECULATION ON HOW THIS WORKS (PDH NOTES)

> signin and authorization handled by the client via autho. JWT stored in localstorage

> the JWT is passed to the server -- and server-side routines are used to validate the JWT in permit a path to be accessed

> In other words -- we have two levels of authorization working in concert
- client side for toggling navbar menu options
- server side -- can be used to ensure that any api coming across the lines is authorized to hit the server and access data. Could use 'checkScopes' function for secondary check on admin privleges etc


----------------------

RECOMMENDED APPROACH

1. study webanalytics as a model -- with a focus on Contacts.js, Auth.js, API,js and Server.js     -- note how this operates

2. set up your own mini test server and client -- a subset of webmachine

3. get the index route working with styling for home page and market (for example)

4. add auth process incrementally --- for each case below

> for guest (no login). Website visitor so has access to public pages
> for client. Signs up for platform. New navbar is presented. 

--- the human being is now authenticated to the platform. But they are only 'authorized' to access certain datasets etc when they complete the registration forms that Daniel has built (and which will eventually be built for member registration)  Again - the server side can do a simple JWT check --  but it must be accompanied with additional information on the user ID (network owner, member, developer?) and db connection

> for member 'Signs up' for platform. New navbar is presented.   -- and there is another level of workflow process steps that must be completed for you to render the right navbar --- You are authenticating -- but they have the process for determining access (network owner, member, developer, etc)

> for admins - Logs into platform. New navbar is presented. There will be a set of webpages unique to an admin that will be rendered when authenticated. It seems to me that we will not need to leverage the process being built by Daniel

The webmachine application makes a call to the server (dbserver) for every web page and every db call. The client will need properly configure the 'connection object' for the db that matches the 'private network' -- 

--------------------
article

https://hackernoon.com/authentication-as-a-service-an-honest-review-of-auth0-315277abcba1

































