
Opportunity - true pure functions - component business models fully encapsulated

---------------

commercejs - api

https://commercejs.com/docs/api/#introduction
https://commercejs.com/
----------------

tutorial - cloud functions

https://github.com/IBM/openwhisk-rest-api-trigger
-----------------------

4 ibm cloud function
https://developer.ibm.com/code/patterns/build-serverless-api-handlers/

https://github.com/IBM/openwhisk-serverless-apis

----------------

from ibm research

ibm functions and composer
https://github.com/ibm-functions/composer

shell
https://www.npmjs.com/package/@ibm-functions/shell

FORMAT of a json composer   -- shows how to define a finite state machine -- which is compiled
https://github.com/ibm-functions/composer/blob/master/docs/FORMAT.md

----------------------


curated list of serverless functions

https://github.com/anaibol/awesome-serverless

------------------------

Serverless Computing has disrupted the Cloud. Serverless is widely synonymous with Functions-as-a-Service (FaaS) — which are cloud-native, usually stateless, functions that scale on demand — although the model of computing is broader than FaaS. It brings to the Cloud a set of properties that are central to the serverless promise: little to no concern about operations, auto provisioning and autoscaling, pay-per-use with zero cost for idle time.

A new programming approach is necessary, one that allows for coordinating across functions, services, and APIs; which encourages incremental and modular code development; and which bridges the gap between code editors and fancy UIs. For these reasons, we developed Composer and the functions shell (fsh) for programming the IBM Cloud: 100% serverless.